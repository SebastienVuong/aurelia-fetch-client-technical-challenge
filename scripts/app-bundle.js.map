{"version":3,"sources":["src/app.ts","src/datafetch.ts","src/environment.ts","src/main.ts","src/resources/index.ts"],"names":[],"mappings":"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","file":"app-bundle.js","sourcesContent":["import {DataLoader} from \"./datafetch\";\n\nexport class App {\n    users: Array<Object>;\n    \n    constructor() {\n        this.users = [];\n        DataLoader.fetchData()\n            .then(data => {\n                let refinedData = data.results.map(user => {\n                    var refinedOutput = {\n                        login: user.login,\n                        gender: user.gender,\n                        name: user.name,\n                        email: user.email,\n                        picture: user.picture\n                    };\n                    return refinedOutput;\n                });\n                \n                // Capitalizing first letter\n                refinedData.forEach((user,idx) => {\n                    refinedData[idx].name.first = user.name.first.charAt(0).toUpperCase() + user.name.first.slice(1);\n                    refinedData[idx].name.last = user.name.last.charAt(0).toUpperCase() + user.name.last.slice(1);\n                    refinedData[idx].name.title = user.name.title.charAt(0).toUpperCase() + user.name.title.slice(1);\n                })\n                /*Repeted functionality, would usually write a function to capitalize the first letter*/\n                \n                this.users = refinedData;\n            });\n    }\n}","import {HttpClient} from 'aurelia-fetch-client';\n\nexport class DataLoader {\n    // Data Fetcher\n    static fetchData() {\n        const client = new HttpClient();\n        const dataSize = 20;\n        const url = `https://randomuser.me/api/?results=${dataSize}`;\n        // console.log('fetchData()'); // TRACKER\n        return client.fetch(url)\n            .then(res => res.json())\n            .catch(err => {\n                console.log('fetchData failed')\n                throw new Error(err);\n            });\n    }\n}","export default {\n  debug: true,\n  testing: true\n};\n","import {Aurelia} from 'aurelia-framework'\nimport environment from './environment';\n\nexport function configure(aurelia: Aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import {FrameworkConfiguration} from 'aurelia-framework';\n\nexport function configure(config: FrameworkConfiguration) {\n  //config.globalResources([]);\n}\n"],"sourceRoot":".."}